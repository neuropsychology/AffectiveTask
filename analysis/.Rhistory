dpi=450,
fig.path = "figures/"
)
library(reticulate)
use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
reticulate::repl_python()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import neurokit as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 62:
print("Warning!")
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, events_id = nk.eeg_create_mne_events(events["onsets"])
raw = raw.add_events(events, "Foto").copy()
return(raw)
# Chunk 5
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
for participant in list_participants:
participant
participant
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
"../data/" + participant + "/" + participant + ".edf"
participant
mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = False)
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 62:
print("Warning!")
raw.to_data_frame()["Foto"].plot()
else:
return(events)
events = check_events(raw)
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = False)
events = check_events(raw)
events = raw.to_data_frame()["Foto"]
setwd("D:/Dropbox/RECHERCHE/N/AffectiveTask/analysis")
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import neurokit as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 62:
print("Warning!")
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, events_id = nk.eeg_create_mne_events(events["onsets"])
raw = raw.add_events(events, "Foto").copy()
return(raw)
# Chunk 5
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
# Chunk 6
for participant in list_participants:
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
# raw = add_events(raw)
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
reticulate::repl_python()
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import neurokit as nk
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 62:
print("Warning!")
raw.to_data_frame()["Foto"].plot()
else:
return(events)
def add_events(raw):
events = check_events(raw)
events, events_id = nk.eeg_create_mne_events(events["onsets"])
raw = raw.add_events(events, "Foto").copy()
return(raw)
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
for participant in list_participants:
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
raw = add_events(raw)
def add_events(raw):
events = check_events(raw)
events, events_id = nk.eeg_create_mne_events(events["onsets"])
raw = raw.add_events(events, "Foto")
return(raw)
raw = add_events(raw)
eeg_channels = mne.pick_types(raw.info, eeg=True)
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
check_events(raw)
raw
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
reticulate::repl_python()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, events_id = nk.eeg_create_mne_events(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
setwd("D:/Dropbox/RECHERCHE/N/AffectiveTask/analysis")
reticulate::repl_python()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.find_events(events, cut = "higher")
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, events_id = nk.eeg_create_mne_events(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
for participant in list_participants:
print(participant)
participant
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
reticulate::use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
reticulate::repl_python()
reticulate::repl_python()
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
def add_events(raw):
events = check_events(raw)
events, events_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
for participant in list_participants:
print(participant)
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
raw = add_events(raw)
reticulate::repl_python()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
reticulate::use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
# Chunk 5
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
setwd("D:/Dropbox/RECHERCHE/N/AffectiveTask/analysis")
reticulate::repl_python()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
reticulate::use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
setwd("D:/Dropbox/RECHERCHE/N/AffectiveTask/analysis")
reticulate::repl_python()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
reticulate::use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
# Chunk 5
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
reticulate::repl_python()
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["durations"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
for participant in list_participants:
print(participant)
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
raw = add_events(raw)
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["Duration"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
raw = add_events(raw)
setwd("D:/Dropbox/RECHERCHE/N/AffectiveTask/analysis")
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
dpi=450,
fig.path = "figures/"
)
library(reticulate)
reticulate::use_python(python = "D:/Downloads/WPy64-3741/python-3.7.4.amd64/python.exe")
# Chunk 2
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
# Chunk 3
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["Duration"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
# Chunk 4
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
# Chunk 5
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
reticulate::repl_python()
import os
import re
import pandas as pd
import numpy as np
import mne
import autoreject
import TruScanEEGpy
import neurokit2 as nk
def check_events(raw):
events = raw.to_data_frame()["Foto"]
events = nk.events_find(events, inter_min=100)
if len(events["Duration"]) != 60:
print("Warning!")
print(events)
raw.to_data_frame()["Foto"].plot()
else:
return(events)
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["onsets"])
raw.add_events(events, "Foto")
return(raw)
list_participants = os.listdir("../data/")
x = np.array(["." not in x for x in list_participants])
list_participants = list(np.array(list_participants)[x])
list_participants
for participant in list_participants:
print(participant)
raw = mne.io.read_raw_edf("../data/" + participant + "/" + participant + ".edf", preload = True)
raw = add_events(raw)
events = check_events(raw)
def add_events(raw):
events = check_events(raw)
events, event_id = nk.events_to_mne(events["Onset"])
raw.add_events(events, "Foto")
return(raw)
raw = add_events(raw)
